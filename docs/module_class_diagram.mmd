classDiagram
    class Module {
        - module_id: str
        - module_type: str
        - config_path: str
        - recording_folder: str
        - logger: logging.Logger
        - config_manager: ModuleConfigManager
        - export_manager: ExportManager
        - communication_manager: ModuleCommunicationManager
        - health_manager: ModuleHealthManager
        - ptp_manager: PTPManager
        - command_handler: ModuleCommandHandler
        - service_manager: ModuleServiceManager
        - session_manager: SessionManager
        - callbacks: dict
        - recording_session_id: str
        - current_filename: str
        - samplerate: Any
        - recording_filetype: Any
        - is_running: bool
        - is_recording: bool
        - is_streaming: bool
        - start_time: Any
        + __init__(module_type: str, config: dict = None, config_path: str = None)
        + when_controller_discovered(controller_ip: str, controller_port: int)
        + controller_disconnected()
        + start_recording(experiment_name: str = None, duration: str = None) -> Optional[str]
        + stop_recording() -> bool
        + list_recordings()
        + clear_recordings(filename: str = None, filenames: list = None, older_than: int = None, keep_latest: int = 0)
        + export_recordings(filename: str, length: int = 0, destination, experiment_name: str = None)
        + list_commands()
        + start() -> bool
        + stop() -> bool
        + set_config(new_config: dict, persist: bool = False) -> bool
        + generate_module_id(module_type: str) -> str
    }
    class ModuleConfigManager {
        - config: dict
        - logger: logging.Logger
        + get(key: str, default=None)
        + get_all() -> dict
        + save_config() -> bool
        + _merge_configs(base: dict, new: dict)
    }
    class ExportManager {
        - module_id: str
        - recording_folder: str
        - config: dict
        - logger: logging.Logger
        + export_file(filename: str, destination, experiment_name: str = None) -> bool
        + export_all_files(destination, experiment_name: str = None) -> bool
        + unmount()
    }
    class ModuleCommunicationManager {
        - logger: logging.Logger
        - module_id: str
        - config_manager: ModuleConfigManager
        + connect(controller_ip: str, controller_port: int) -> bool
        + start_command_listener() -> bool
        + send_status(status: dict)
        + cleanup()
        + set_callbacks(callbacks: dict)
    }
    class ModuleHealthManager {
        - logger: logging.Logger
        - config_manager: ModuleConfigManager
        - communication_manager: ModuleCommunicationManager
        + get_health() -> dict
        + start_heartbeats()
        + stop_heartbeats()
        + set_callbacks(callbacks: dict)
    }
    class PTPManager {
        - logger: logging.Logger
        - role: PTPRole
        - running: bool
        + start()
        + stop()
        + get_status() -> dict
    }
    class ModuleCommandHandler {
        - logger: logging.Logger
        - module_id: str
        - module_type: str
        - config_manager: ModuleConfigManager
        - start_time: Any
        + handle_command(command: dict)
        + set_callbacks(callbacks: dict)
        + cleanup()
    }
    class ModuleServiceManager {
        - logger: logging.Logger
        - module: Module
        - controller_ip: str
        - controller_port: int
        + register_service() -> bool
        + cleanup()
    }
    Module *-- ModuleConfigManager
    Module *-- ExportManager
    Module *-- ModuleCommunicationManager
    Module *-- ModuleHealthManager
    Module *-- PTPManager
    Module *-- ModuleCommandHandler
    Module *-- ModuleServiceManager